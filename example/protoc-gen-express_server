#! /usr/bin/env node

// create an express JSON rpc server
// NOT FINISHED

const { CodeGeneratorRequest, CodeGeneratorResponse } = require('../src/index.js')

const router = (service, package) => `// ${package}.${service.name}

const express = require('express')
const router = express()

const getContext(req, package, service, method) => {
  return new Promise((resolve, reject) => {
    const ret = {headers: req.headers}
    resolve(ret)
  })
}

const sendResponse(res, ret, package, service, method) => {
  // res.json() your response here
}

module.exports = implementation => {
${service.method.map(m => `
  router.METHOD('URL', (req, res) => {
    getContext(req, '${package}', '${service.name}', '${m.name}')
    .then(ctx => {
      implementation.${package}.${service.name}.${m.name}(ctx, (err, ret) => {
        if (err) throw err
        sendResponse(res, ret, '${package}', '${service.name}', '${m.name}')
      })
    })
    .catch(err => { res.status(500).json(err) })
  })
`).join('\n')}
}
`

process.stdin.on('data', data => {
  const incoming = CodeGeneratorRequest(data)
  const out = {file: []}
  incoming.protoFile
    .filter(p => p.service)
    .forEach(proto => {
      proto.service.forEach(service => {
        out.file.push({
          name: `${proto.package}/${service.name}.js`,
          content: router(service, proto.package)
        })
      })
    })
  process.stdout.write(CodeGeneratorResponse(out))
})

